rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // match /{document=**} {
    //   allow read, write: if false;
    // }

    function canCreate() {
    	let isSignedIn = request.auth.uid != null;
      let isBanned = exists(/databases/$(database)/documents/banned/$(request.auth.uid));
      return isSignedIn && !isBanned;
    }

    match /messages/{docId} {
    	allow read: if true; //request.auth.uid != null;
      allow create: if canCreate();
      allow update: if canCreate();
    }
  
    
    match /lobby/{docId} {
    	allow read: if true;
      allow create: if canCreate() && 
        request.resource.data.keys().hasAll(["amount", "betSide", "createdAt", "gameId", "multiplier", "status", "user1Id", "user1Metamask", "user1PhotoURL", "user1DisplayName", "user1FollowThrough", "contractAddress"]) && 
        request.resource.data.keys().hasOnly(["amount", "betSide", "createdAt", "gameId", "multiplier", "status", "user1Id", "user1Metamask", "user1PhotoURL", "user1DisplayName", "user1FollowThrough", "contractAddress"]) && 
        request.resource.data.amount is number && 
        request.resource.data.amount > 0 &&
        request.resource.data.betSide is string &&
        (request.resource.data.betSide == "white" || request.resource.data.betSide == "black") &&
        request.resource.data.createdAt is timestamp &&
        request.resource.data.gameId is string &&
        request.resource.data.gameId != "" &&
        request.resource.data.multiplier is number &&
        request.resource.data.status == "ready" && 
        request.resource.data.user1Id is string &&
        request.resource.data.user1Metamask is string &&
        request.resource.data.user1PhotoURL is string &&
        request.resource.data.user1DisplayName is string &&
        request.resource.data.user1FollowThrough is list &&
        request.resource.data.contractAddress is string &&
        request.resource.data.user1Id == request.auth.uid && 
        request.auth.token.name == request.resource.data.user1DisplayName && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.walletAddress == request.resource.data.user1Metamask &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.photoURL == request.resource.data.user1PhotoURL &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.betAcceptedCount == request.resource.data.user1FollowThrough[0] && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.betFundedCount == request.resource.data.user1FollowThrough[1] &&
        request.resource.data.createdAt == request.time;
      allow update: if canCreate() && 
        !(request.resource.data.diff(resource.data).affectedKeys().hasAny(["amount", "betSide", "createdAt", "gameId", "multiplier", "status", "user1Id", "user1Metamask", "user1PhotoURL", "user1DisplayName", "user1FollowThrough", "contractAddress"])) &&
        request.resource.data.keys().hasOnly([""])
    }
    
    match /users/{docId} {
    	allow read: if true;
      allow create: if canCreate() &&
        docId == request.auth.uid &&
        request.resource.data.keys().hasAll(["betAcceptedCount", "betFundedCount", "blocked", "walletAddress", "photoURL"]) &&
        request.resource.data.keys().hasOnly(["betAcceptedCount", "betFundedCount", "blocked", "walletAddress", "photoURL"]) &&

        request.resource.data.betAcceptedCount is number &&
        request.resource.data.betFundedCount is number  &&
        request.resource.data.blocked is list &&
        request.resource.data.walletAddress is string &&
        request.resource.data.photoURL is string &&

        request.resource.data.betAcceptedCount == 0 &&
        request.resource.data.betFundedCount == 0 &&
        request.resource.data.blocked == [] &&
        request.resource.data.photoURL != "";

      allow update: if docId == request.auth.uid && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(["blocked", "photoURL", "walletAddress"]) &&
        request.resource.data.blocked is list &&
        request.resource.data.photoURL is string &&
        request.resource.data.walletAddress is string;
    }
  }
}